import os

from src import utils


class DomXSSAnalyzer:
    def __init__(self):
        pass


class StaticAnalyzer(DomXSSAnalyzer):
    def __init__(self):
        super().__init__()
        self.payloads = ["<script>alert('XSS')</script>", "%3Cscript%3Ealert%28%27XSS%27%29%3C%2Fscript%3E"]
        self.report = []
        self.vulns = []
        self.safe_types = ["EmptyStatement", "ArrayExpression", "ArrayPattern", "BreakStatement"]
        self.source_pairs   =   []
        self.sink_pairs     =   []
        self.pairs = self.vuln_gates()
        

    def scan(self, parsed_script):
        if parsed_script["type"] == "Program":
            for _statement in parsed_script["body"]:
                if _statement["type"] not in self.safe_types:
                    if self.source_in_sink(_statement):
                        self.vulns.append(_statement)
    
    def source_in_sink(self, _statement):
        for pair in self.pairs:
            if all(item in utils.get_recursively(_statement, "name") for item in pair):
                self.report.append([pair, self.__sink_part(pair)])
                return True
        return False
    
    def vuln_gates(self):
        with open(os.path.join("src", "Analyzer", "DomBasedXssScanner", "Source.txt"), 'r') as source_file:
            self.source_pairs = [line.strip().split('.') for line in source_file.readlines()]

        with open(os.path.join("src", "Analyzer", "DomBasedXssScanner", "Sinks.txt"), 'r') as sink_file:
            self.sink_pairs = [line.strip().split('.') for line in sink_file.readlines()]
        
        pairs = []
        for sink in self.sink_pairs:
            for source in self.source_pairs:
                pairs.append([])
                pairs[-1].extend(sink)
                pairs[-1].extend(source)
        return pairs
        

    def __sink_part(self, pair):
        for sink in self.sink_pairs:
            if sink[:len(pair)] == pair:
                return len(pair)
        return 0
            
