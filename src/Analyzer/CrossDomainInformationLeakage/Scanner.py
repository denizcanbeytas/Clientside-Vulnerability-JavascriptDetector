from src import utils


class CrossDomainInformationLeakageAnalyzer:
    def __init__(self):
        pass

#Cross domain hatası get operasyonları bulmak için kullanılıyor.
class StaticAnalyzer(CrossDomainInformationLeakageAnalyzer):
    def __init__(self):
        super().__init__()
        self.inline_vulns   = []
        self.linked_vulns   = []
        self.report = []

    def scan(self, session, parsed_script):
        self.inline_vulns = self.get_in_html(session.find("form"))
        self.linked_vulns = self.get_in_js(parsed_script)
    

    def get_in_html(self, forms):
        vulns = []
        if forms:
            for inline_script in forms:
                if "method" in inline_script.attrs:
                    if inline_script.attrs["method"].lower() == "get":
                        vulns.append(inline_script)
                        self.report.append("GET method found!")
        return vulns
    
    def get_in_js(self, parsed_script):
        vulns = []
        
        for prop in utils.get_recursively(parsed_script, "property"):
            if "name" in prop.keys():
                if prop["name"].lower() == "get":
                    vulns.append(prop)
                    self.report.append("GET method found!")
        return vulns
"""
def find_get_post(session, parsed_scripts):
    print("İşlem başladı")
    for script in session.find("form"):
        if "method" in script.attrs:
            r = script.attrs["method"]
            print(r)
        else:
            print("Boş")
"""