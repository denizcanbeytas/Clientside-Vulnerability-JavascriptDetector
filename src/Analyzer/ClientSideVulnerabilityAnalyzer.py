from requests_html import HTMLSession
from urllib.parse import urljoin, urlparse
import requests
import pyjsparser
import jsbeautifier

from src import utils

from src.Analyzer.DomBasedXssScanner import Scanner as DOMScanner
from src.Analyzer.CrossDomainInformationLeakage import Scanner as CDIScanner
from src.Analyzer.ClientSideLogicAndDataStorage import Scanner as CSDSScanner

class ClientSideVulnerabilityAnalyzer:
    def __init__(self):
        
        self.DOMScanner         = DOMScanner.StaticAnalyzer()
        self.CDISScanner        = CDIScanner.StaticAnalyzer()
        self.CSDSScanner        = CSDSScanner.StaticAnalyzer()

        self.dom_xss            = "dom_xss"
        self.inf_leakage        = "inf_leakage"
        self.data_storage       = "data_storage"

        self.session            = None
        self.response           = None

        self.url                = None

        self.scripts            = None

        self.session_updated    = False


    def create_session(self, url):
        #Gelen url için session oluşturur.
        #Bu response ile session oluşturduğu mesajını gönderir.
        #Html'in sessionStorage kısmında oluşturdu.
        try:
            self.url                = urlparse(url, "https").geturl().replace("///", "//")
        
            self.session            = HTMLSession()
            self.response           = self.session.get(self.url)
            
            self.session_updated    = True
            return True
        except Exception as e:
            print(e)
            return False

    def render_response_html(self):
        try:
            self.response.html.render(timeout=20)
        except Exception as e:
            print(e)
            exit(1)
    
    def get_scripts(self):
        if not self.session:
            raise Exception("Session not found!")
        
        if self.scripts is None or self.session_updated:
            self.session_updated = True
            scripts = []
            for script in self.response.html.find("script"):
                current = []
                if "src" in script.attrs:
                    current.append("linked")
                    current.append(self.decode(requests.get(urljoin(self.url, script.attrs["src"])).text))
                else:
                    current.append("inline")
                    current.append(self.decode(script.text))
                scripts.append(current)
            self.scripts = scripts
        return self.scripts

    def parse(self, js_content):
        return pyjsparser.parse(jsbeautifier.beautify(js_content))

    def get_recursively(self, search_dict, target):
        return utils.get_recursively(search_dict, target)
        
    def decode(self, target):
        return utils._decode(target)

    def report(self):
        print("***********************************\n\t\t\t\tREPORTS")
        print("DOM BASED XSS VULNERABILITY SCAN REPORT")
        for rep in self.DOMScanner.report:
            print('\t', rep[1], "sinks found in ", rep[0])
        '''
        for rep in self.CDISScanner.report:
            print('\t', rep)
        '''
        print("***********************************\n\t\t\t\tREPORTS")
        print("Cross Domain Information Leakage REPORT")
        for rep in self.CSDSScanner.report:
            print('\t', rep)
