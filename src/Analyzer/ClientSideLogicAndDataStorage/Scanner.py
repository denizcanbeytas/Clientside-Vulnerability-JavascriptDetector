
class ClientSideLogicAndDataStorage:
    def __init__(self):
        pass
# Cookie ve Storage açıkları yönetir.
class StaticAnalyzer(ClientSideLogicAndDataStorage):
    def __init__(self):
        super().__init__()
        self.vulns   = []
        self.robots_founded = False
        self.report = []

    def scan(self, session):
        if not self.robots_founded:
            self.vulns.extend(self.robot_in(session.find("meta")))
            self.robots_founded = True
        self.vulns.extend(self.get_in_js(session.find("script")))
        
        
    def robot_in(self, _meta):
        vulns = []
        for mt in _meta:
            if "name" in mt.attrs:
                if mt.attrs["name"].lower() == "robots":
                    vulns.append(mt)
                    self.report.append("Robots.txt found...")
        return vulns
    
    def get_in_js(self, _cookie):
        vulns = []
        scriptlist = str(_cookie).split(">") 
        for ck in scriptlist:
            lowck = ck.lower()
            if lowck.find("document.cookie") != -1:
                if lowck.find("secure") != -1:
                    vulns.append(ck)
                    self.report.append("Secure attribute is not found in document.cookie" )
                if lowck.find("samesite=none") != -1:
                    vulns.append(ck)
                    self.report.append("Samesite=none attribute is not found in document.cookie")
                if lowck.find("httponly") != -1:
                    vulns.append(ck)
                    self.report.append("HttpOnly flag is not found in document.cookie")
        return vulns