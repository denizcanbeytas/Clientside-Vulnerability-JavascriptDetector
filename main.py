import os
import argparse
import logging
from tkinter import *
from tkinter import ttk
from src.Analyzer import ClientSideVulnerabilityAnalyzer
from tqdm import tqdm

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="DOM BASED XSS SCANNER")
    #Parse the input url from console
    parser.add_argument("--url", help="Target website url", required=True)
    #If detailed processes, add -v tag of console request
    parser.add_argument("-v", "--verbose", help="Increase verbosity level", action="store_true")
    args = parser.parse_args()

    if args.verbose:
        logging.basicConfig(level=logging.DEBUG)
        logging.info("Verbosity ON")

    os.system("clear" if os.name == "posix" else "cls")
    #Initialize the analyzer
    analyzer = ClientSideVulnerabilityAnalyzer.ClientSideVulnerabilityAnalyzer()
    

    # Create a new session and connect with the website
    print("Session creating", end='\r')
    analyzer.create_session(args.url)
    print("Session created ")

    # Render javascipt code in response html
    print("HTML rendering", end='\r')
    analyzer.render_response_html()
    print("HTML rendered ")

    # Get all scripts from response html page (inline - external)
    print("Scripts crawling", end='\r')
    scripts = analyzer.get_scripts()
    print("Scripts crawled ")

    print(f"Analyzing started for {analyzer.url}\n\n")

    parsed_scripts = []
    not_parsed = []
    progress_bar = tqdm(total=len(scripts) * 4)
    # enumarate nedir bak
    for idx, script in enumerate(scripts):
        try:
            parsed_script = analyzer.parse(script[1])    
            analyzer.CDISScanner.scan(analyzer.response.html, parsed_script)
            analyzer.DOMScanner.scan(parsed_script)
            analyzer.CSDSScanner.scan(analyzer.response.html)
            progress_bar.update(4)
        except Exception as e:
            not_parsed.append(["javascript parsing", f"script {idx}", e])
            progress_bar.update(4)

    progress_bar.close()
    #Tkinter Interface
    window = Tk()

    window.title("Welcome to LikeGeeks app")

    window.geometry('600x600')
    b = f"""\n\n\t\t\tRESULTS
                   
    
    Cross Domain Information Leakage
    Inline vulnerabilities\t->\t{len(analyzer.CDISScanner.inline_vulns)}
    Linked vulnerabilities\t->\t{len(analyzer.CDISScanner.linked_vulns)}

    Dom Based XSS
    Vulnerabilities\t->\t{len(analyzer.DOMScanner.vulns)}

    Client Side Logic and Data Storage
    Vulnerabilities\t->\t{len(analyzer.CSDSScanner.vulns)}

   \n\n"""

    lbl = Label(window, text=b)
    

    lbl.grid(column=0, row=0)


    window.mainloop()

    if not_parsed:
        if input("Some errors occured during runtime! Want to see errors?(y/n)").lower() == 'y':
            for err in not_parsed:
                print(f"\"{err[2]}\" while {err[0]} on {err[1]}")
    
    if input("Print detailed report?(y/n)").lower() == 'y':
        print(analyzer.report())